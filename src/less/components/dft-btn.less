@dft-btn-color:                  @white;
@dft-btn-background:         @malachite;

@dft-btn-color-hover:        @malachite;
@dft-btn-background-hover:       @white;
@dft-btn-border-color-hover: @malachite;

@dft-btn-border-size: 2px;
@dft-btn-height: 40px;
@dft-btn-width: 151px;
/*
 * Example of using dft-btn
 *
 * Using custom bootstrap class "btn" to set custom properties, and overwriting some of them
 * by creating dft-btn that corresponds to design.
 *
 * To set disabled style the "boolean" variable must be equal to true.
 *
 * template example
 * <button [ngClass]="{ 'disabled': boolean }" [disabled]="boolean" type="button" class="btn dft-btn">
 *          <span class="dft-btn-label">BUTTON</span>
 *          <div class="slider"></div>
 * </button>
 */
.btn {
    &.dft-btn {
        overflow: hidden;
        position: relative;
        font-size: 16px;
        display: block;
        background-color: @dft-btn-background;
        border: @dft-btn-border-size solid transparent;
        color: @dft-btn-color;
        font-weight: 500;
        box-sizing: border-box;
        height: @dft-btn-height;
        width: @dft-btn-width;
        .border-radius ( 0px );
        .transition ( 0.3s ease-in-out );
        .slider {
            background: transparent;
            top: 0;
            // to get needed animation effect this slider fit button size
            width: calc( @dft-btn-width - @dft-btn-border-size*2 );
            height: calc( @dft-btn-height - @dft-btn-border-size*2 );
            position: absolute;
            // set initial slider place to get effect corresponding to design
            left: calc( -@dft-btn-width + -@dft-btn-border-size );
            .transform ( skew(30deg) );
            .transition ( 0.3s ease-in-out );
        }
        .dft-btn-label {
            // to prevent overwriting of button label by slider
            position: relative;
            z-index: 1;
        }
        &:hover {
            color: @dft-btn-color-hover;
            border-color: @dft-btn-border-color-hover;
            -webkit-box-shadow: none;
            -moz-box-shadow: none;
            box-shadow: none;
        }
        &:hover > .slider {
            transform: translateX( calc( @dft-btn-width + @dft-btn-border-size ) );
            background-color: white;
        }

        &:active, &.active {
            color: @dft-btn-color;
            border-color: @dft-btn-border-color-hover;
            -webkit-box-shadow: none;
            -moz-box-shadow: none;
            box-shadow: none;
        }

        &.disabled {
            cursor: not-allowed;
            background-color: @disabled-grey;
            color: @white;
            border-color: transparent;
        }
    }
}


